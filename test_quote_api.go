package main

import (
	"context"
	"fmt"
	"gohustle/zerodha"
	"os"
	"strings"
	"time"
)

// Test different exchange and symbol combinations to see which ones work with the Kite API
func main() {
	// Initialize Kite Connect
	kiteConnect := zerodha.GetKiteConnect()

	// Test symbols to try
	testSymbols := []string{
		// SENSEX options with BFO exchange prefix
		// "BFO:SENSEX25051365600CE", "BFO:SENSEX25051365600PE", "BFO:SENSEX25051365700CE", "BFO:SENSEX25051365700PE", "BFO:SENSEX25051365800CE",
		// "BFO:SENSEX25051365800PE", "BFO:SENSEX25051365900CE", "BFO:SENSEX25051365900PE", "BFO:SENSEX25051366000CE", "BFO:SENSEX25051366000PE",
		// "BFO:SENSEX25051366100CE", "BFO:SENSEX25051366100PE", "BFO:SENSEX25051366200CE", "BFO:SENSEX25051366200PE", "BFO:SENSEX25051366300CE",
		// "BFO:SENSEX25051366300PE", "BFO:SENSEX25051366400CE", "BFO:SENSEX25051366400PE", "BFO:SENSEX25051366500CE", "BFO:SENSEX25051366500PE",
		// "BFO:SENSEX25051366600CE", "BFO:SENSEX25051366600PE", "BFO:SENSEX25051366700CE", "BFO:SENSEX25051366700PE", "BFO:SENSEX25051366800CE",
		// "BFO:SENSEX25051366800PE", "BFO:SENSEX25051366900CE", "BFO:SENSEX25051366900PE", "BFO:SENSEX25051367000CE", "BFO:SENSEX25051367000PE",
		// "BFO:SENSEX25051367100CE", "BFO:SENSEX25051367100PE", "BFO:SENSEX25051367200CE", "BFO:SENSEX25051367200PE", "BFO:SENSEX25051367300CE",
		// "BFO:SENSEX25051367300PE", "BFO:SENSEX25051367400CE", "BFO:SENSEX25051367400PE", "BFO:SENSEX25051367500CE", "BFO:SENSEX25051367500PE",
		// "BFO:SENSEX25051367600CE", "BFO:SENSEX25051367600PE", "BFO:SENSEX25051367700CE", "BFO:SENSEX25051367700PE", "BFO:SENSEX25051367800CE",
		// "BFO:SENSEX25051367800PE", "BFO:SENSEX25051367900CE", "BFO:SENSEX25051367900PE", "BFO:SENSEX25051368000CE", "BFO:SENSEX25051368000PE",
		// "BFO:SENSEX25051368100CE", "BFO:SENSEX25051368100PE", "BFO:SENSEX25051368200CE", "BFO:SENSEX25051368200PE", "BFO:SENSEX25051368300CE",
		// "BFO:SENSEX25051368300PE", "BFO:SENSEX25051368400CE", "BFO:SENSEX25051368400PE", "BFO:SENSEX25051368500CE", "BFO:SENSEX25051368500PE",
		// "BFO:SENSEX25051368600CE", "BFO:SENSEX25051368600PE", "BFO:SENSEX25051368700CE", "BFO:SENSEX25051368700PE", "BFO:SENSEX25051368800CE",
		// "BFO:SENSEX25051368800PE", "BFO:SENSEX25051368900CE", "BFO:SENSEX25051368900PE", "BFO:SENSEX25051369000CE", "BFO:SENSEX25051369000PE",
		// "BFO:SENSEX25051369100CE", "BFO:SENSEX25051369100PE", "BFO:SENSEX25051369200CE", "BFO:SENSEX25051369200PE", "BFO:SENSEX25051369300CE",
		// "BFO:SENSEX25051369300PE", "BFO:SENSEX25051369400CE", "BFO:SENSEX25051369400PE", "BFO:SENSEX25051369500CE", "BFO:SENSEX25051369500PE",
		// "BFO:SENSEX25051369600CE", "BFO:SENSEX25051369600PE", "BFO:SENSEX25051369700CE", "BFO:SENSEX25051369700PE", "BFO:SENSEX25051369800CE",
		// "BFO:SENSEX25051369800PE", "BFO:SENSEX25051369900CE", "BFO:SENSEX25051369900PE", "BFO:SENSEX25051370000CE", "BFO:SENSEX25051370000PE",
		// "BFO:SENSEX25051370100CE", "BFO:SENSEX25051370100PE", "BFO:SENSEX25051370200CE", "BFO:SENSEX25051370200PE", "BFO:SENSEX25051370300CE",
		// "BFO:SENSEX25051370300PE", "BFO:SENSEX25051370400CE", "BFO:SENSEX25051370400PE", "BFO:SENSEX25051370500CE", "BFO:SENSEX25051370500PE",
		// "BFO:SENSEX25051370600CE", "BFO:SENSEX25051370600PE", "BFO:SENSEX25051370700CE", "BFO:SENSEX25051370700PE", "BFO:SENSEX25051370800CE",
		// "BFO:SENSEX25051370800PE", "BFO:SENSEX25051370900CE", "BFO:SENSEX25051370900PE", "BFO:SENSEX25051371000CE", "BFO:SENSEX25051371000PE",
		// "BFO:SENSEX25051371100CE", "BFO:SENSEX25051371100PE", "BFO:SENSEX25051371200CE", "BFO:SENSEX25051371200PE", "BFO:SENSEX25051371300CE",
		// "BFO:SENSEX25051371300PE", "BFO:SENSEX25051371400CE", "BFO:SENSEX25051371400PE", "BFO:SENSEX25051371500CE", "BFO:SENSEX25051371500PE",
		// "BFO:SENSEX25051371600CE", "BFO:SENSEX25051371600PE", "BFO:SENSEX25051371700CE", "BFO:SENSEX25051371700PE", "BFO:SENSEX25051371800CE",
		// "BFO:SENSEX25051371800PE", "BFO:SENSEX25051371900CE", "BFO:SENSEX25051371900PE", "BFO:SENSEX25051372000CE", "BFO:SENSEX25051372000PE",
		// "BFO:SENSEX25051372100CE", "BFO:SENSEX25051372100PE", "BFO:SENSEX25051372200CE", "BFO:SENSEX25051372200PE", "BFO:SENSEX25051372300CE",
		// "BFO:SENSEX25051372300PE", "BFO:SENSEX25051372400CE", "BFO:SENSEX25051372400PE", "BFO:SENSEX25051372500CE", "BFO:SENSEX25051372500PE",
		// "BFO:SENSEX25051372600CE", "BFO:SENSEX25051372600PE", "BFO:SENSEX25051372700CE", "BFO:SENSEX25051372700PE", "BFO:SENSEX25051372800CE",
		// "BFO:SENSEX25051372800PE", "BFO:SENSEX25051372900CE", "BFO:SENSEX25051372900PE", "BFO:SENSEX25051373000CE", "BFO:SENSEX25051373000PE",

		// // Add NIFTY options for comparison
		// "NFO:NIFTY25051520650CE", "NFO:NIFTY25051520650PE", "NFO:NIFTY25051520700CE", "NFO:NIFTY25051520700PE", "NFO:NIFTY25051520750CE",
		// "NFO:NIFTY25051520750PE", "NFO:NIFTY25051520800CE", "NFO:NIFTY25051520800PE", "NFO:NIFTY25051520850CE", "NFO:NIFTY25051520850PE",
		// "NFO:NIFTY25051520900CE", "NFO:NIFTY25051520900PE", "NFO:NIFTY25051520950CE", "NFO:NIFTY25051520950PE", "NFO:NIFTY25051521000CE",
		// "NFO:NIFTY25051521000PE", "NFO:NIFTY25051521050CE", "NFO:NIFTY25051521050PE", "NFO:NIFTY25051521100CE", "NFO:NIFTY25051521100PE",
		// "NFO:NIFTY25051521150CE", "NFO:NIFTY25051521150PE", "NFO:NIFTY25051521200CE", "NFO:NIFTY25051521200PE", "NFO:NIFTY25051521250CE",
		// "NFO:NIFTY25051521250PE", "NFO:NIFTY25051521300CE", "NFO:NIFTY25051521300PE", "NFO:NIFTY25051521350CE", "NFO:NIFTY25051521350PE",
		// "NFO:NIFTY25051521400CE", "NFO:NIFTY25051521400PE", "NFO:NIFTY25051521450CE", "NFO:NIFTY25051521450PE", "NFO:NIFTY25051521500CE",
		// "NFO:NIFTY25051521500PE", "NFO:NIFTY25051521550CE", "NFO:NIFTY25051521550PE", "NFO:NIFTY25051521600CE", "NFO:NIFTY25051521600PE",
		// "NFO:NIFTY25051521650CE", "NFO:NIFTY25051521650PE", "NFO:NIFTY25051521700CE", "NFO:NIFTY25051521700PE", "NFO:NIFTY25051521750CE",
		// "NFO:NIFTY25051521750PE", "NFO:NIFTY25051521800CE", "NFO:NIFTY25051521800PE", "NFO:NIFTY25051521850CE", "NFO:NIFTY25051521850PE",
		// "NFO:NIFTY25051521900CE", "NFO:NIFTY25051521900PE", "NFO:NIFTY25051521950CE", "NFO:NIFTY25051521950PE", "NFO:NIFTY25051522000CE",
		// "NFO:NIFTY25051522000PE", "NFO:NIFTY25051522050CE", "NFO:NIFTY25051522050PE", "NFO:NIFTY25051522100CE", "NFO:NIFTY25051522100PE",
		// "NFO:NIFTY25051522150CE", "NFO:NIFTY25051522150PE", "NFO:NIFTY25051522200CE", "NFO:NIFTY25051522200PE", "NFO:NIFTY25051522250CE",
		// "NFO:NIFTY25051522250PE", "NFO:NIFTY25051522300CE", "NFO:NIFTY25051522300PE", "NFO:NIFTY25051522350CE", "NFO:NIFTY25051522350PE",
		// "NFO:NIFTY25051522400CE", "NFO:NIFTY25051522400PE", "NFO:NIFTY25051522450CE", "NFO:NIFTY25051522450PE", "NFO:NIFTY25051522500CE",
		// "NFO:NIFTY25051522500PE", "NFO:NIFTY25051522550CE", "NFO:NIFTY25051522550PE", "NFO:NIFTY25051522600CE", "NFO:NIFTY25051522600PE",
		// "NFO:NIFTY25051522650CE", "NFO:NIFTY25051522650PE", "NFO:NIFTY25051522700CE", "NFO:NIFTY25051522700PE", "NFO:NIFTY25051522750CE",
		// "NFO:NIFTY25051522750PE", "NFO:NIFTY25051522800CE", "NFO:NIFTY25051522800PE", "NFO:NIFTY25051522850CE", "NFO:NIFTY25051522850PE",
		// "NFO:NIFTY25051522900CE", "NFO:NIFTY25051522900PE", "NFO:NIFTY25051522950CE", "NFO:NIFTY25051522950PE", "NFO:NIFTY25051523000CE",
		// "NFO:NIFTY25051523000PE", "NFO:NIFTY25051523050CE", "NFO:NIFTY25051523050PE", "NFO:NIFTY25051523100CE", "NFO:NIFTY25051523100PE",
		// "NFO:NIFTY25051523150CE", "NFO:NIFTY25051523150PE", "NFO:NIFTY25051523200CE", "NFO:NIFTY25051523200PE", "NFO:NIFTY25051523250CE",
		// "NFO:NIFTY25051523250PE", "NFO:NIFTY25051523300CE", "NFO:NIFTY25051523300PE", "NFO:NIFTY25051523350CE", "NFO:NIFTY25051523350PE",
		// "NFO:NIFTY25051523400CE", "NFO:NIFTY25051523400PE", "NFO:NIFTY25051523450CE", "NFO:NIFTY25051523450PE", "NFO:NIFTY25051523500CE",
		// "NFO:NIFTY25051523500PE", "NFO:NIFTY25051523550CE", "NFO:NIFTY25051523550PE", "NFO:NIFTY25051523600CE", "NFO:NIFTY25051523600PE",
		// "NFO:NIFTY25051523650CE", "NFO:NIFTY25051523650PE", "NFO:NIFTY25051523700CE", "NFO:NIFTY25051523700PE", "NFO:NIFTY25051523750CE",
		// "NFO:NIFTY25051523750PE", "NFO:NIFTY25051523800CE", "NFO:NIFTY25051523800PE", "NFO:NIFTY25051523850CE", "NFO:NIFTY25051523850PE",
		// "NFO:NIFTY25051523900CE", "NFO:NIFTY25051523900PE", "NFO:NIFTY25051523950CE", "NFO:NIFTY25051523950PE", "NFO:NIFTY25051524000CE",
		// "NFO:NIFTY25051524000PE", "NFO:NIFTY25051524050CE", "NFO:NIFTY25051524050PE", "NFO:NIFTY25051524100CE", "NFO:NIFTY25051524100PE",
		// "NFO:NIFTY25051524150CE", "NFO:NIFTY25051524150PE", "NFO:NIFTY25051524200CE", "NFO:NIFTY25051524200PE", "NFO:NIFTY25051524250CE",
		// "NFO:NIFTY25051524250PE", "NFO:NIFTY25051524300CE", "NFO:NIFTY25051524300PE", "NFO:NIFTY25051524350CE", "NFO:NIFTY25051524350PE",
		// "NFO:NIFTY25051524400CE", "NFO:NIFTY25051524400PE", "NFO:NIFTY25051524450CE", "NFO:NIFTY25051524450PE", "NFO:NIFTY25051524500CE",
		// "NFO:NIFTY25051524500PE", "NFO:NIFTY25051524550CE", "NFO:NIFTY25051524550PE", "NFO:NIFTY25051524600CE", "NFO:NIFTY25051524600PE",
		// "NFO:NIFTY25051524650CE", "NFO:NIFTY25051524650PE", "NFO:NIFTY25051524700CE", "NFO:NIFTY25051524700PE", "NFO:NIFTY25051524750CE",
		// "NFO:NIFTY25051524750PE", "NFO:NIFTY25051524800CE", "NFO:NIFTY25051524800PE", "NFO:NIFTY25051524850CE", "NFO:NIFTY25051524850PE",
		// "NFO:NIFTY25051524900CE", "NFO:NIFTY25051524900PE", "NFO:NIFTY25051524950CE", "NFO:NIFTY25051524950PE", "NFO:NIFTY25051525000CE",
		// "NFO:NIFTY25051525000PE", "NFO:NIFTY25051525050CE", "NFO:NIFTY25051525050PE", "NFO:NIFTY25051525100CE", "NFO:NIFTY25051525100PE",
		// "NFO:NIFTY25051525150CE", "NFO:NIFTY25051525150PE", "NFO:NIFTY25051525200CE", "NFO:NIFTY25051525200PE", "NFO:NIFTY25051525250CE",
		// "NFO:NIFTY25051525250PE", "NFO:NIFTY25051525300CE", "NFO:NIFTY25051525300PE", "NFO:NIFTY25051525350CE", "NFO:NIFTY25051525350PE",
		// "NFO:NIFTY25051525400CE", "NFO:NIFTY25051525400PE", "NFO:NIFTY25051525450CE", "NFO:NIFTY25051525450PE", "NFO:NIFTY25051525500CE",
		// "NFO:NIFTY25051525500PE", "NFO:NIFTY25051525550CE", "NFO:NIFTY25051525550PE", "NFO:NIFTY25051525600CE", "NFO:NIFTY25051525600PE",
		// "NFO:NIFTY25051525650CE", "NFO:NIFTY25051525650PE", "NFO:NIFTY25051525700CE", "NFO:NIFTY25051525700PE", "NFO:NIFTY25051525750CE",
		// "NFO:NIFTY25051525750PE", "NFO:NIFTY25051525800CE", "NFO:NIFTY25051525800PE", "NFO:NIFTY25051525850CE", "NFO:NIFTY25051525850PE",
		// "NFO:NIFTY25051525900CE", "NFO:NIFTY25051525900PE", "NFO:NIFTY25051525950CE", "NFO:NIFTY25051525950PE", "NFO:NIFTY25051526000CE",
		// "NFO:NIFTY25051526000PE", "NFO:NIFTY25051526050CE", "NFO:NIFTY25051526050PE", "NFO:NIFTY25051526100CE", "NFO:NIFTY25051526100PE",
		// "NFO:NIFTY25051526150CE", "NFO:NIFTY25051526150PE", "NFO:NIFTY25051526200CE", "NFO:NIFTY25051526200PE",

		// Index symbols
		"NSE:NIFTY 50",
		"BSE:SENSEX",

		// Regular equity symbols
		"NSE:RELIANCE",
		"BSE:RELIANCE",

		"BFO:SENSEX2552087200CE",
		"BFO:SENSEX2551365600CE",
		"BFO:SENSEX2551365600PE",
		"BFO:SENSEX2551365700CE",
		"BFO:SENSEX2551365700PE",
		"BFO:SENSEX2551365800CE",

		"NFO:NIFTY2551525950PE",
		"NFO:NIFTY2551526000CE",
		"NFO:NIFTY2551526000PE",
		"NFO:NIFTY2551526050CE",
		"NFO:NIFTY2551526050PE",
		"NFO:NIFTY2551526100CE",
		"NFO:NIFTY25051526100PE",
		"NFO:NIFTY25051526150CE",
		"NFO:NIFTY25051526150PE",
		"NFO:NIFTY25051526200CE",
		"NFO:NIFTY25051526200PE",
	}

	fmt.Println("Testing Quote API with various symbols...")
	fmt.Println("========================================")

	// Test each symbol individually
	for _, symbol := range testSymbols {
		fmt.Printf("\nTesting symbol: %s\n", symbol)

		// Get quote for the symbol
		quote, err := kiteConnect.Kite.GetQuote(symbol)

		if err != nil {
			fmt.Printf("Error getting quote for %s: %v\n", symbol, err)
			continue
		}

		// Check if the quote contains data for this symbol
		if len(quote) == 0 {
			fmt.Printf("No data returned for %s (empty response)\n", symbol)
			continue
		}

		// Check if the symbol exists in the response
		if _, ok := quote[symbol]; !ok {
			fmt.Printf("Symbol %s not found in response\n", symbol)

			// Print all keys in the response to see what was returned
			keys := make([]string, 0, len(quote))
			for k := range quote {
				keys = append(keys, k)
			}
			fmt.Printf("Response contains keys: %s\n", strings.Join(keys, ", "))
			continue
		}

		// Print volume and OI if available
		if quote[symbol].Volume != 0 {
			fmt.Printf("  Volume: %d\n", quote[symbol].Volume)
		}
		if quote[symbol].OI != 0 {
			fmt.Printf("  Open Interest: %.2f\n", quote[symbol].OI)
		}
	}

	// Now test with multiple symbols in a single request
	fmt.Println("\n\nTesting multiple symbols in a single request...")
	fmt.Println("==============================================")

	// Get quotes for all symbols at once
	quotes, err := kiteConnect.Kite.GetQuote(testSymbols...)

	if err != nil {
		fmt.Printf("Error getting quotes for multiple symbols: %v\n", err)
		os.Exit(1)
	}

	// Print the number of quotes returned
	fmt.Printf("Received %d quotes out of %d requested symbols\n", len(quotes), len(testSymbols))

	// Print which symbols have data
	for _, symbol := range testSymbols {
		if _, ok := quotes[symbol]; ok {
			fmt.Printf("✓ Data available for: %s\n", symbol)
		} else {
			fmt.Printf("✗ No data for: %s\n", symbol)
		}
	}

	// Try with real-time generated option symbols
	fmt.Println("\n\nTesting with dynamically generated option symbols...")
	fmt.Println("===================================================")

	// Get current date
	now := time.Now()

	// Format for the next month's expiry (assuming last Thursday of the month)
	year, month, _ := now.Date()
	nextMonth := month + 1
	nextYear := year
	if nextMonth > 12 {
		nextMonth = 1
		nextYear++
	}

	// Generate some option symbols with the next month's expiry
	expiryMonth := fmt.Sprintf("%02d", int(nextMonth))
	expiryYear := fmt.Sprintf("%02d", nextYear%100)

	dynamicSymbols := []string{
		fmt.Sprintf("NFO:NIFTY%s%s18000CE", expiryYear, expiryMonth),  // NIFTY call
		fmt.Sprintf("NFO:NIFTY%s%s18000PE", expiryYear, expiryMonth),  // NIFTY put
		fmt.Sprintf("BFO:SENSEX%s%s65000CE", expiryYear, expiryMonth), // SENSEX call
		fmt.Sprintf("BFO:SENSEX%s%s65000PE", expiryYear, expiryMonth), // SENSEX put
	}

	// Test each dynamic symbol
	for _, symbol := range dynamicSymbols {
		fmt.Printf("\nTesting dynamic symbol: %s\n", symbol)

		// Get quote for the symbol
		quote, err := kiteConnect.Kite.GetQuote(symbol)

		if err != nil {
			fmt.Printf("Error getting quote for %s: %v\n", symbol, err)
			continue
		}

		// Check if the quote contains data for this symbol
		if len(quote) == 0 {
			fmt.Printf("No data returned for %s (empty response)\n", symbol)
			continue
		}

		// Check if the symbol exists in the response
		if _, ok := quote[symbol]; !ok {
			fmt.Printf("Symbol %s not found in response\n", symbol)

			// Print all keys in the response to see what was returned
			keys := make([]string, 0, len(quote))
			for k := range quote {
				keys = append(keys, k)
			}
			fmt.Printf("Response contains keys: %s\n", strings.Join(keys, ", "))
			continue
		}

		// Print the quote data
		fmt.Printf("Quote data for %s:\n", symbol)
		fmt.Printf("  Last Price: %.2f\n", quote[symbol].LastPrice)
	}

	// Test with the market data manager
	fmt.Println("\n\nTesting with MarketDataManager...")
	fmt.Println("=================================")

	mdm := zerodha.GetMarketDataManager()

	// Test GetQuoteForSymbols
	mdmQuotes, err := mdm.GetQuoteForSymbols(context.Background(), testSymbols)
	if err != nil {
		fmt.Printf("Error from MarketDataManager.GetQuoteForSymbols: %v\n", err)
	} else {
		fmt.Printf("MarketDataManager returned %d quotes\n", len(mdmQuotes))

		// Print which symbols have data
		for _, symbol := range testSymbols {
			if _, ok := mdmQuotes[symbol]; ok {
				fmt.Printf("✓ MDM data available for: %s\n", symbol)
			} else {
				fmt.Printf("✗ MDM no data for: %s\n", symbol)
			}
		}
	}
	fmt.Println("\nTest completed.")
}

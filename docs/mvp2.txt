MVP2 will have Go, Redis, Nats, TimescaleDB.
Use Unix Socket in Redis to connect with Go app.

I connect to Zerodha/Fyers websocket.
I Subscribe around 500-600 instruments.
In worst case, each instument can send a tick per second.

Logic for orders -> Positions
For order, there will be quantity and instrument_token.

orders can be either placed at Zerodha or paper trading.
No differnce in logic except the papert trading flag in request  input.

Order Status can be below on Zerodha Side
Order statusesÂ¶
The status field in the order response shows the current state of the order. The status values are largely self explanatory. The most common statuses are OPEN, COMPLETE, CANCELLED, and REJECTED.

An order can traverse through several interim and temporary statuses during its lifetime. For example, when an order is first placed or modified, it instantly passes through several stages before reaching its end state. Some of these are highlighted below.

status	 
PUT ORDER REQ RECEIVED	Order request has been received by the backend
VALIDATION PENDING	Order pending validation by the RMS (Risk Management System)
OPEN PENDING	Order is pending registration at the exchange
MODIFY VALIDATION PENDING	Order's modification values are pending validation by the RMS
MODIFY PENDING	Order's modification values are pending registration at the exchange
TRIGGER PENDING	Order's placed but the fill is pending based on a trigger price.
CANCEL PENDING	Order's cancellation request is pending registration at the exchange
AMO REQ RECEIVED	Same as PUT ORDER REQ RECEIVED, but for AMOs

A scheduler will be running on every second, to fetch/update the order and its status.
Once Order is placed, the position will have to be updated. There is a scheduler that fetches positons and sync that to db.
So,the Actual Zerodha orders/positions should work properly.

For Paper trading,
the same instrument token will be recived and an order will be placed. But, the positions, has to be calculated manually.

For Placing orders, now API's are there.
New API's
http://localhost:8080/api/orders/place
queryParam -> type -> move_away/ move_closer/ exit
              steps -> 1/2
              quantity -> 1/0.5/0.25

Normal Payload:
{"instrumentToken":"9885186","orderType":"MARKET","side":"SELL","quantity":75,"price":0,"triggerPrice":0,"product":"NRML","validity":"DAY","disclosedQty":0,"tag":"GoHustle","paperTrading":true}

API should work like this.
type, steps and quantity will be the queryParam
From the instrument_token, fetch the strike, expiry, instrument_type
if instument_tyoe is CE, then 
move away is strike + steps * 50(100 for Sensex)
if instument_tyoe is PE, then 
move away is strike - steps * 50(100 for Sensex)

for the strike, instrument_type and expiry fetch the insrument_token.

get the current position quantity and get the quantity from the queryParam
the toProcessQuantity should be multiples of 75 for Nifty and 20 for sensex.
if quantity is 1, toProcessQuantity is full
if quantity is 0.5, toProcessQuantity is half
if quantity is 0.25, toProcessQuantity is quarter (round to the nearest 75 or 20 based on index.)

then, in case of move, the toProcessQuantity to be removed from current posision and 
toProcessQuantity to be added to new position.

in case of exit, the toProcessQuantity to be removed from current position only.

Move Quantity logic:
The basic unit for ordering is 1 lot.
the quantity for the same is 75 for Nifty and 20 for Sensex.
if quantity is 1, toProcessQuantity is full
if quantity is 0.5, toProcessQuantity is half:
While calualting the half, the basic unit should be 75/20 and multiples of 75/20 basex on index.
say the quanity is 375, while splitting into half it should be 
= 375/2 = 187.5
But, we should split this cleanly.
Logic: 375/(75) minimal lot.
answer is 5.
To spluit the 5/2 will be 2.5, but we need the nearest whole number.
so, the nearest number would be 3. so split should be 3+2
3*75 and 2*75.
Can we calulate based on this?




The tick response will be of strucutre:
{
    "tradable": true,
    "mode": "full",
    "instrument_token": 14050562,
    "last_price": 1449.0,
    "last_traded_quantity": 15,
    "average_traded_price": 1694.86,
    "volume_traded": 19380,
    "total_buy_quantity": 47940,
    "total_sell_quantity": 7740,
    "ohlc": {
      "open": 2135.8,
      "high": 2135.8,
      "low": 1360.75,
      "close": 2085.45
    },
    "change": -30.518593109400843,
    "last_trade_time": "2024-08-13T14:21:08",
    "oi": 8490,
    "oi_day_high": 9045,
    "oi_day_low": 8370,
    "exchange_timestamp": "2024-08-13T14:21:39",
    "depth": {
      "buy": [
        {
          "quantity": 210,
          "price": 1441.45,
          "orders": 2
        },
        {
          "quantity": 30,
          "price": 1441.4,
          "orders": 1
        },
        {
          "quantity": 165,
          "price": 1441.35,
          "orders": 1
        },
        {
          "quantity": 15,
          "price": 1441.3,
          "orders": 1
        },
        {
          "quantity": 45,
          "price": 1441.2,
          "orders": 3
        }
      ],
      "sell": [
        {
          "quantity": 180,
          "price": 1446.9,
          "orders": 1
        },
        {
          "quantity": 30,
          "price": 1446.95,
          "orders": 1
        },
        {
          "quantity": 120,
          "price": 1447.85,
          "orders": 1
        },
        {
          "quantity": 180,
          "price": 1447.95,
          "orders": 1
        },
        {
          "quantity": 75,
          "price": 1448.0,
          "orders": 1
        }
      ]
    }
  }


  from this, i wish to store only 
    uint32 instrument_token = 1;
    int64 exchange_unix_timestamp = 2;
    double last_price = 3;
    uint32 open_interest = 4;
    uint32 volume_traded = 5;
    double average_trade_price = 6;

as timseries data to TimeScaleDB. (This is for future analysis. Even if there is some delay here, it is ok, as i might use this data to export only as file at the end of the day)

I also wanna update the last_price to redis, for quick access.

Let me know how can i design the ingestion. 
reliable pipeline that guarantees instant Redis updates and eventual TimescaleDB inserts, while keeping things simple:

I currently have GO, Redis, Nats and WAL.(No timescaldb)

Wish to store the data in TimescaleDB.

Thinking to go with Go, Redis, Nats, TimescaleDB.

I want a simple architecture.
How do I approach this? remove any component if thats not needed.
Suggest the optimal architecture

